#!/usr/bin/lua

local nixio = require 'nixio'

local function exec(cmd)
	local f, err = io.popen(cmd)
	if not f then
		return nil, err
	end
	local s = f:read('*a')
	f:close()
	return s
end

local function echo_log(log)
	os.execute('logger -t cloud_watch "'..log..'"')
	os.execute('echo "cloud_watch: '..log..'" > /dev/kmsg')
	os.execute('echo "'..os.date()..': '..log..'" >> /root/cloud_watch.log')
	os.execute('/usr/sbin/log_roll_by_count 1000 /root/cloud_watch.log')
	os.execute("sync")
end

local function gen_gcom_script(at_cmd)
	local script = [[opengt
 set com 115200n81
 set comecho off
 set senddelay 0.02
 waitquiet 0.2 0.2
 flash 0.1

:start
 send "AT+%s^m"
 get 1 "" $s
 print $s

:continue
 exit 0
 ]]
	return string.format(script, at_cmd)
end

local function create_gcom_script(script, at_cmd)
	local path = '/tmp/__gcom_'..script
	local f, err = io.open(path, 'w+')
	if not f then
		return nil, err
	end
	f:write(gen_gcom_script(at_cmd))
	f:close()
	return path
end

local function auto_port_exec(script, at_cmd)
	local port = '/dev/ttyUSB2'
	local script_path = '/etc/gcom/'..script
	local f, err = io.open(script_path, 'r')
	if not f then
		script_path, err = create_gcom_script(script, at_cmd)
		if not script_path then
			return nil, err
		end
	else
		f:close()
	end

	return exec('gcom -d '..port..' -s '..script_path)
end

--- CCID sim card id
local function get_ccid()
	local s, err = auto_port_exec('getccid.gcom', 'CCID')
	if not s then
		return nil, err
	end

	local ccid = string.match(s, '+CCID:%s-(%w+)')
	if not ccid then
		return nil, s
	end
	return ccid
end

local gpio_export = false -- For F
local sn, ssn

local function sysinfo_psn()
	if sn and ssn then
		return sn, ssn
	end

	local cmd = 'sysinfo psn'
	local result = exec(cmd)
	if not result then
		return nil
	end

	sn = string.match(result, 'PSN:%s+([^%c]+)')
	if not sn then
		return nil
	end

	ssn = string.sub(sn, 1, 7)
	return sn, ssn
end

local function sysinfo_module()
	--print('sysinfo_module')

	local cmd = 'sysinfo module'
	local result = exec(cmd)
	if not result then
		return nil
	end
	
	local device_f = false
	local module = string.match(result, 'Modle:%s+([^%c]+)')
	local ccid = string.match(result, 'SimCard:%s+([^%c]+)')
	local sn, ssn = sysinfo_psn()
	if ssn == '2-31104' or ssn == '2-31101' or ssn == '2-31103' then
		device_f = true
		if not gpio_export then
			echo_log('Export 4G gpio for F series device')
			os.execute("echo 1 > /sys/class/gpio/export")
			os.execute("echo out > /sys/class/gpio/gpio1/direction")
			os.execute("echo 1 > /sys/class/gpio/gpio1/value")
			gpio_export = true
		end
	end

	if ccid == 'UNKNOWN ERROR' then
		ccid = nil
	else
		if device_f then
			--- F208H or F202H
			ccid = get_ccid()
		end
	end

	--print('MODULE', module)
	--print('CCID', ccid)

	return {
		module = module,
		ccid = ccid,
		device_f = device_f
	}
end

local function restart_wanpwrc(info)
	if info.device_f then
		echo_log('4G Module reset(gpio) (F20X)')
		os.execute("echo 0 > /sys/class/gpio/gpio1/value")
		nixio.nanosleep(12)
		os.execute("echo 1 > /sys/class/gpio/gpio1/value")
	else
		echo_log('4G Wan service restart(wanpwrc)')
		os.execute("/etc/init.d/wanpwrc restart")
	end
end

local cloud_last = os.time()
local ping_last = os.time()
local reset_times = 0

local function watch_cloud_status(info)
	local now = os.time()

	local str, err = exec('cat /tmp/sysinfo/cloud_status')
	if str and string.len(str) > 0 then
		local status, last = string.match(str, '(%d+)%c+(%d+)')
		if status and last then
			if tonumber(status) == 1 then
				--- Use now when status is online (as the timestamp will be updated untill offline)
				cloud_last = now
			else
				--- offline timestamp will be updated, but we will not use it
				if cloud_last > now then
					cloud_last = now
				end
			end
		end
	else
		-- if file is empty, the programe is not running, skip checking
		cloud_last = now
		ping_last = now
	end
	--print(now, cloud_last)

	--- ping check per min
	if now - ping_last > 60 then
		local str, err = exec('cat /tmp/sysinfo/online_check')
		if str and string.len(str) > 0 then
			-- lua5.1
			local r, err = os.execute('ping -c 1 '..str)
			if r == 0 then
				cloud_last = now  -- overwrite the cloud_last here
				ping_last = now
				reset_times = 0
			else
				echo_log('ping failed')
			end
		else
			--- No online check ip just set to now
			ping_last = now
			if cloud_last == now then
				reset_times = 0 --- Clear the reset times here if there is no online check
			end
		end
	end

	--- If reset times more than 3
	if reset_times > 3 then
		ping_last = now
		echo_log('4G Wan failure reboot device!')
		os.execute('sync')
		os.execute('reboot')
	end

	--- reset the 4g module or repower it?
	if (now - ping_last) > 180 or (now - cloud_last) > 180 then
		echo_log('4G Wan failure reset module!')
		restart_wanpwrc(info)
		reset_times = reset_times + 1
		ping_last = ping_last + 120
		cloud_last = cloud_last + 120
	end
end

os.execute('touch /tmp/sysinfo/cloud_status') --- make sure the file is there
echo_log('Start cloud_watch services...')

while true do
	local info = sysinfo_module()
	if info.module and info.ccid and string.len(info.ccid) > 0 then
		watch_cloud_status(info)
	end
	nixio.nanosleep(15)
end
