#!/usr/bin/lua

local nixio = require 'nixio'
local fs = require 'nixio.fs'
local json = require 'luci.jsonc'
local ss = require 'signalstrength'
local util = require 'luci.util'

local function exec(cmd)
	local f, err = io.popen(cmd)
	if not f then
		return nil, err
	end
	local s = f:read('*a')
	f:close()
	return s
end

local function exec_json(cmd)
	local result = exec(cmd)
	if not result then
		return nil
	end
	local parser = json.new()
	local r, err = parser:parse(result)
	if not r then
		return nil, err
	end

	return parser:get(), result
end

local function info_export(info)
	local f, err = io.open('/tmp/sysinfo/3ginfo', "w+")
	if not f then
		return nil, err
	end
	f:write(info)
	f:close()
end

local function led_control(info)
	--[[
	local sso = ss.new(info)
	local level = sso:level()

	if level >= 3 then
		os.execute("echo 1 > /sys/devices/platform/leds/leds/kooiot\\:green\\:gs/brightness")
		os.execute("echo 1 > /sys/devices/platform/leds/leds/kooiot\\:green\\:bs/brightness")
	else
		os.execute("echo 0 > /sys/devices/platform/leds/leds/kooiot\\:green\\:gs/brightness")
		if level >= 1  then
			os.execute("echo 1 > /sys/devices/platform/leds/leds/kooiot\\:green\\:bs/brightness")
		else
			os.execute("echo 0 > /sys/devices/platform/leds/leds/kooiot\\:green\\:bs/brightness")
		end
	end
	]]--

	if not info.ccid or string.len(info.ccid) == 0 then
		os.execute("echo 0 > /sys/devices/platform/leds/leds/kooiot\\:green\\:gs/brightness")
		os.execute("echo 0 > /sys/devices/platform/leds/leds/kooiot\\:green\\:bs/brightness")
		return
	end

	local csq = tonumber(info.csq) or 0
	if csq >= 17 then
		os.execute("echo 1 > /sys/devices/platform/leds/leds/kooiot\\:green\\:gs/brightness")
		os.execute("echo 1 > /sys/devices/platform/leds/leds/kooiot\\:green\\:bs/brightness")
	else
		os.execute("echo 0 > /sys/devices/platform/leds/leds/kooiot\\:green\\:gs/brightness")
		if csq >= 10  then
			os.execute("echo 1 > /sys/devices/platform/leds/leds/kooiot\\:green\\:bs/brightness")
		else
			os.execute("echo 0 > /sys/devices/platform/leds/leds/kooiot\\:green\\:bs/brightness")
		end
	end
end

local function echo_log(log)
	os.execute('echo "'..log..'" >> /dev/console')
	os.execute('echo "'..os.date()..': '..log..'" >> /mnt/data/wwanleds.log')
	os.execute('tail -n 500 /mnt/data/wwanleds.log > /mnt/data/wwanleds.log.new')
	os.execute('mv -f /mnt/data/wwanleds.log.new /mnt/data/wwanleds.log')
	os.execute("sync")
end

local function reset_4g_module()
	echo_log('4G Wan reset module')

	os.execute("ifdown 4g_wan")
	os.execute("echo 1 > /sys/class/gpio/pcie_reset/value")
	os.execute("killall -9 uqmi")
	nixio.nanosleep(1)
	os.execute("echo 0 > /sys/class/gpio/pcie_reset/value")
	nixio.nanosleep(10)
	os.execute("ifup 4g_wan")
end

local function repower_4g_module()
	echo_log('4G Wan re-power module')

	os.execute("ifdown 4g_wan")
	os.execute("echo 0 > /sys/class/gpio/pcie_power/value")
	nixio.nanosleep(1)
	os.execute("echo 1 > /sys/class/gpio/pcie_power/value")
	nixio.nanosleep(10)
	os.execute("ifup 4g_wan")
end

local cloud_last = os.time()

local function watch_cloud_status()
	local now = os.time()

	local str, err = exec('cat /tmp/sysinfo/cloud_status')
	if str and string.len(str) > 0 then
		local status, last = string.match(str, '(%d+)%c+(%d+)')
		if status and last then
			local last_num = tonumber(last)
			if tonumber(status) == 1 then
				--- if it is online using now if last is not present
				last_num = last_num or now
			end
			if last_num and last_num > cloud_last then
				cloud_last = last_num
			end
		end
	else
		-- if file is empty, the programe is not running, skip checking
		cloud_last = now
	end

	--- If 20 minutes that gateway not connected
	if now - cloud_last > 1200 then
		cloud_last = now
		echo_log('Cloud status out of date (20 min)')
		repower_4g_module()
	end
end

local wwan0_not_exits = true
local wwan0_ip_last_got = os.time()
local wwan0_reset_times = 0

local function watch_4g_wan()
	local wwan0_has_ip = false

	--- If there is not 4g_wan or 4g_wan is disabled
	local wan_4g = util.ubus('network.interface', 'status', {interface='4g_wan'})
	if not wan_4g or (not wan_4g.autostart and not wan_4g.errors) then
		wwan0_not_exits = true
		--os.execute('echo "4G wan is disabled or not exists !!!!" >> /dev/console')
		return
	end

	--- Get the 4g_wan_4 interface and check whether has got IP or not
	local iface = util.ubus('network.interface', 'status', {interface='4g_wan_4'})
	if iface and iface.l3_device == 'wwan0' then
		local ipv4_addr = iface['ipv4-address']
		if ipv4_addr and #ipv4_addr > 0 then
			wwan0_has_ip = true
		end
	end

	--- Get the 4g_wan_6 interface and check whether has got IP or not
	local iface6 = util.ubus('network.interface', 'status', {interface='4g_wan_6'})
	if iface6 and iface.l3_device == 'wwan0' then
		local ipv6_addr = iface['ipv6-address']
		if ipv6_addr and #ipv6_addr > 0 then
			wwan0_has_ip = true
		end
	end

	-- Get the 3g-4g_wan inteface and check whether has got IP or not
	local iface = util.ubus('network.interface', 'status', {interface='4g_wan'})
	if iface and iface.l3_device == '3g-4g_wan' then
		local ipv4_addr = iface['ipv4-address']
		if ipv4_addr and #ipv4_addr > 0 then
			wwan0_has_ip = true
		end
		local ipv6_addr = iface['ipv6-address']
		if ipv6_addr and #ipv6_addr > 0 then
			wwan0_has_ip = true
		end
	end

	--- If previously there is no wwan0 then just update the last ip got
	if wwan0_not_exits then
		wwan0_not_exits = false
		wwan0_ip_last_got = os.time()
	end
	
	--- If 4G got ip connected, then return
	if wwan0_has_ip then
		--os.execute('echo "4G wan IP is ok!!!!" >> /dev/console')
		wwan0_ip_last_got = os.time()
		wwan0_reset_times = 0

		-- Only watch cloud status if the wwan0 has ip
		watch_cloud_status()

		return
	end

	--os.execute('echo "4G wan IP missing" >> /dev/console')

	--- Three minutes ip lost
	if (os.time() - wwan0_ip_last_got) >  (wwan0_reset_times * 120 + 300) then
		if wwan0_reset_times < 3 then
			--- Next check will be two minutes later
			wwan0_reset_times = wwan0_reset_times + 1
			cloud_last = os.time()
			--- Reset 4G module
			reset_4g_module()
		else
			--- already reset 4g module for three times and network still missing
			wwan0_ip_last_got = os.time()
			wwan0_reset_times = 0
			cloud_last = os.time()
			repower_4g_module()
		end
	end

	--[[
	if false then
		os.execute('echo "'..os.date()..' 4G Wan reset reboot" >> /mnt/data/wwanleds.log')
		os.execute("sync")
		os.execute("reboot")
	end
	]]--
end

info_export('{}')
os.execute('touch /tmp/sysinfo/cloud_status') --- make sure the file is there
echo_log('Start wwanleds services...')

while true do
	local info, info_str = exec_json('3ginfo json')
	info_export(info_str)
	led_control(info)	
	if info.ccid and string.len(info.ccid) > 0 then
		watch_4g_wan()
	end
	nixio.nanosleep(15)
end
