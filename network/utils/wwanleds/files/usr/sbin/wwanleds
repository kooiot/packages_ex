#!/usr/bin/lua

local nixio = require 'nixio'
local fs = require 'nixio.fs'
local json = require 'luci.jsonc'
-- local ss = require 'signalstrength'
local util = require 'luci.util'

local function exec(cmd)
	local f, err = io.popen(cmd)
	if not f then
		return nil, err
	end
	local s = f:read('*a')
	f:close()
	return s
end

local function exec_json(cmd)
	local result = exec(cmd)
	if not result then
		return nil
	end
	local parser = json.new()
	local r, err = parser:parse(result)
	if not r then
		return nil, err
	end

	return parser:get(), result
end

local function info_export(info)
	local f, err = io.open('/tmp/sysinfo/3ginfo', "w+")
	if not f then
		return nil, err
	end
	f:write(info)
	f:close()
end

local led_base_path = "/sys/class/leds/kooiot:"
local led_base_path_s = "/sys/class/leds/"

local function _led_control(name, value)
	local path = led_base_path .. name .. "/brightness"
	local path_s = led_base_path_s .. name .. "/brightness"

	local _lctrl = function(led_path, led_value)
		os.execute("echo "..led_value.." > "..led_path)
	end

	if fs.access(path) then
		_lctrl(path, value)
	end

	if fs.access(path_s) then
		_lctrl(path_s, value)
	end
end

local function led_control(info)
	--[[
	local sso = ss.new(info)
	local level = sso:level()

	if level >= 3 then
		os.execute("echo 1 > /sys/devices/platform/leds/leds/kooiot\\:green\\:gs/brightness")
		os.execute("echo 1 > /sys/devices/platform/leds/leds/kooiot\\:green\\:bs/brightness")
	else
		os.execute("echo 0 > /sys/devices/platform/leds/leds/kooiot\\:green\\:gs/brightness")
		if level >= 1  then
			os.execute("echo 1 > /sys/devices/platform/leds/leds/kooiot\\:green\\:bs/brightness")
		else
			os.execute("echo 0 > /sys/devices/platform/leds/leds/kooiot\\:green\\:bs/brightness")
		end
	end
	]]--

	local show = true
	if not info.ccid or string.len(info.ccid) == 0 then
		show = false
	end
	local csq = tonumber(info.csq) or 0

	if fs.access("/lib/functions/tlink_csq_leds.sh") then
		if show then
			os.execute("sh /lib/functions/tlink_csq_leds.sh 1 "..csq)
		else
			os.execute("sh /lib/functions/tlink_csq_leds.sh 0 "..csq)
		end
		return
	end

	if not show then
		_led_control("green:bbs", 0)
		_led_control("green:bs", 0)
		_led_control("green:gs", 0)
		_led_control("green:ggs", 0)
		return
	end

	if csq >= 17 then
		_led_control("green:bbs", 1)
		_led_control("green:bs", 1)

		_led_control("green:gs", 1)
		if csq > 25 then
			_led_control("green:ggs", 1)
		else
			_led_control("green:ggs", 0)
		end
	else
		_led_control("green:ggs", 0)
		_led_control("green:gs", 0)

		_led_control("green:bbs", 1)
		if csq >= 10  then
			_led_control("green:bs", 1)
		else
			_led_control("green:bs", 0)
		end
	end
end

local function echo_log(log)
	os.execute('logger -t wwanleds "'..log..'"')
	os.execute('echo "wwanleds: '..log..'" > /dev/kmsg')
	os.execute('echo "'..os.date()..': '..log..'" >> /mnt/data/wwanleds.log')
	os.execute('/usr/sbin/log_roll_by_count 1000 /mnt/data/wwanleds.log')
	os.execute("sync")
end

local function echo_debug(log)
	os.execute('echo "wwanleds: '..log..'" > /dev/kmsg')
end

local function reset_wwan_module(iface_name)
	echo_log(iface_name..' reset module')
	local pcie_reset_path = '/sys/class/gpio/pcie_reset/value'
	local pcie_reset = fs.access(pcie_reset_path)
	local pcie_on_off_path = '/sys/class/gpio/pcie_on_off/value'
	local pcie_on_off = fs.access(pcie_on_off_path)

	os.execute("ifdown "..iface_name)
	if pcie_on_off then
		echo_log(iface_name..' module reset on(soft)')
		os.execute("echo 0 > "..pcie_on_off_path)
		nixio.nanosleep(3) -- 3 seconds
	end
	if pcie_reset then
		echo_log(iface_name..' module reset on')
		os.execute("echo 1 > "..pcie_reset_path)
	end
	os.execute("killall -9 uqmi")
	nixio.nanosleep(1)
	if pcie_on_off then
		echo_log(iface_name..' module reset off(soft)')
		os.execute("echo 1 > "..pcie_on_off_path)
	end
	if pcie_reset then
		echo_log(iface_name..' module reset off')
		os.execute("echo 0 > "..pcie_reset_path)
	end
	nixio.nanosleep(10)
	os.execute("ifup "..iface_name)
end

local function repower_wwan_module(iface_name)
	echo_log(iface_name..' re-power module')

	local pcie_power_path = '/sys/class/gpio/pcie_power/value'
	local pcie_power = fs.access(pcie_power_path)
	local pcie_on_off_path = '/sys/class/gpio/pcie_on_off/value'
	local pcie_on_off = fs.access(pcie_on_off_path)

	os.execute("ifdown "..iface_name)
	if pcie_on_off then
		echo_log(iface_name..' module power off(soft)')
		os.execute("echo 0 > "..pcie_on_off_path)
		nixio.nanosleep(3) -- 3 seconds
	end
	if pcie_power then
		echo_log(iface_name..' module power off')
		os.execute("echo 0 > "..pcie_power_path)
	end
	os.execute("killall -9 uqmi")
	nixio.nanosleep(1)
	if pcie_on_off then
		echo_log(iface_name..' module power on(soft)')
		os.execute("echo 1 > "..pcie_on_off_path)
	end
	if pcie_power then
		echo_log(iface_name..' module power on')
		os.execute("echo 1 > "..pcie_power_path)
	end
	nixio.nanosleep(10)
	os.execute("ifup "..iface_name)
end

local cloud_last = os.time()
local wwan0_not_exits = true
local wwan0_ip_last_got = os.time()
local wwan0_reset_times = 0

local function check_and_reset(iface_name, time_lost)
	if time_lost >  (wwan0_reset_times * 120 + 300) then
		if wwan0_reset_times < 3 then
			--- Next check will be two minutes later
			wwan0_reset_times = wwan0_reset_times + 1
			cloud_last = os.time()
			--- Reset wwan module
			reset_wwan_module(iface_name)
		else
			--- already reset wwan module for three times and network still missing
			wwan0_ip_last_got = os.time()
			wwan0_reset_times = 0
			cloud_last = os.time()
			repower_wwan_module(iface_name)
		end
	end
end

local function watch_cloud_status(iface_name)
	local now = os.time()

	local online_check_disable = false
	if fs.access('/etc/rc.d/S99symlink') then
		online_check_disable = true
	end
	if fs.access('/etc/rc.d/S22symlink') then
		online_check_disable = true
	end
	if fs.access('/etc/online_check_disabled') then
		online_check_disable = true
	end

	local sts_str, err = exec('cat /tmp/sysinfo/cloud_status')
	if not online_check_disable and sts_str and string.len(sts_str) > 0 then
		local status, last = string.match(sts_str, '(%d+)%c+(%d+)')
		if status and last then
			if tonumber(status) == 1 then
				--- Use now when status is online (as the timestamp will be updated untill offline)
				cloud_last = now
			else
				--- The timestamp updated, but we do not use it
				if cloud_last > now then
					-- If the ntp update or TZ changed
					cloud_last = now
				end
			end
		end
	else
		-- if file is empty, the programe is not running, skip checking
		cloud_last = now
	end

	if now - cloud_last > 60 then
		local chk_str, err = exec('cat /tmp/sysinfo/online_check')
		if not chk_str or string.len(chk_str) <= 0 then
			-- Ping check the cloud host by default, avoid device been disabled in cloud
			chk_str, err = exec('cat /tmp/sysinfo/cloud')
		end
		local ping_host = string.match(chk_str or '', '^(%S+)')
		if ping_host then
			-- lua5.1
			local r, err = os.execute('ping -c 1 '..ping_host)
			echo_debug('PING '..ping_host..' return '..r)
			if r == 0 then
				cloud_last = now
			else
				echo_debug('PING failed. last:'..cloud_last..' now:'..now)
			end
		else
			echo_debug('cannot find host from '..chk_str)
		end
	end

	check_and_reset(iface_name, now - cloud_last)
end

local function check_wwan_status(iface_name, l3_dev)
	local wwan0_has_ip = false

	--- Get the <iface>_4 interface and check whether has got IP or not
	local iface = util.ubus('network.interface', 'status', {interface=iface_name..'_4'})
	if iface and iface.l3_device == l3_dev then
		local ipv4_addr = iface['ipv4-address']
		if ipv4_addr and #ipv4_addr > 0 then
			wwan0_has_ip = true
		end
	end

	--- Get the <iface>_6 interface and check whether has got IP or not
	local iface6 = util.ubus('network.interface', 'status', {interface=iface_name..'_6'})
	if iface6 and iface.l3_device == l3_dev then
		local ipv6_addr = iface['ipv6-address']
		if ipv6_addr and #ipv6_addr > 0 then
			wwan0_has_ip = true
		end
	end

	-- Get the 3g-<iface> inteface and check whether has got IP or not
	local iface_3g = util.ubus('network.interface', 'status', {interface=iface_name})
	if iface_3g and iface_3g.l3_device == '3g-'..iface_name then
		local ipv4_addr = iface_3g['ipv4-address']
		if ipv4_addr and #ipv4_addr > 0 then
			wwan0_has_ip = true
		end
		local ipv6_addr = iface_3g['ipv6-address']
		if ipv6_addr and #ipv6_addr > 0 then
			wwan0_has_ip = true
		end
	end

	--- If previously there is no wwan then just update the last ip got
	if wwan0_not_exits then
		wwan0_not_exits = false
		wwan0_ip_last_got = os.time()
	end

	--- If 4G got ip connected, then return
	if wwan0_has_ip then
		--os.execute('echo "4G wan IP is ok!!!!" >> /dev/console')
		wwan0_ip_last_got = os.time()
		wwan0_reset_times = 0

		-- Only watch cloud status if the wwan has ip
		watch_cloud_status(iface_name)

		return
	end

	--os.execute('echo "4G wan IP missing" >> /dev/console')

	check_and_reset(iface_name, os.time() - wwan0_ip_last_got)

	--[[
	if false then
		os.execute('echo "'..os.date()..' 4G Wan reset reboot" >> /mnt/data/wwanleds.log')
		os.execute("sync")
		os.execute("reboot")
	end
	]]--
end

local function watch_wwan_status()
	local wan_iface = util.ubus('network.interface', 'status', {interface='4g_wan'})
	if wan_iface then
		--- If 4g_wan iface is disabled
		if (not wan_iface.autostart and not wan_iface.errors) then
			wwan0_not_exits = true
			return
		end
		return check_wwan_status('4g_wan', 'wwan0')
	end

	local wan_iface_5g = util.ubus('network.interface', 'status', {interface='5g_wan'})
	if wan_iface_5g then
		--- If 5g_wan iface is disabled
		if (not wan_iface_5g.autostart and not wan_iface_5g.errors) then
			wwan0_not_exits = true
			return
		end
		return check_wwan_status('5g_wan', 'usb0')
	end
end

info_export('{}')
os.execute('touch /tmp/sysinfo/cloud_status') --- make sure the file is there
echo_log('Start wwanleds services...')

while true do
	local info, info_str = exec_json('3ginfo json')
	if info then
		info_export(info_str)
		led_control(info)
		if info.ccid and string.len(info.ccid) > 0 then
			watch_wwan_status()
		end
		--- sleep for 15 seconds
		nixio.nanosleep(15)
	else
		echo_log('3ginfo failed, error:'..info_str)
		-- clear the 3ginfo file
		info_export('{}')
		led_control({})
		--- keep call 3ginfo after one second
		nixio.nanosleep(1)
	end
end
