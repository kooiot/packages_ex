#!/usr/bin/lua

local nixio = require 'nixio'
local fs = require 'nixio.fs'
local json = require 'luci.jsonc'
local ss = require 'signalstrength'
local util = require 'luci.util'

local function exec(cmd)
	local f, err = io.popen(cmd)
	if not f then
		return nil, err
	end
	local s = f:read('*a')
	f:close()
	return s
end

local function exec_json(cmd)
	local result = exec(cmd)
	if not result then
		return nil
	end
	local parser = json.new()
	local r, err = parser:parse(result)
	if not r then
		return nil, err
	end

	return parser:get(), result
end

local function info_export(info)
	local f, err = io.open('/tmp/sysinfo/3ginfo', "w+")
	if not f then
		return nil, err
	end
	f:write(info)
	f:close()
end

local function led_control(info)
	--[[
	local sso = ss.new(info)
	local level = sso:level()

	if level >= 3 then
		os.execute("echo 1 > /sys/devices/platform/leds/leds/kooiot\\:green\\:gs/brightness")
		os.execute("echo 1 > /sys/devices/platform/leds/leds/kooiot\\:green\\:bs/brightness")
	else
		os.execute("echo 0 > /sys/devices/platform/leds/leds/kooiot\\:green\\:gs/brightness")
		if level >= 1  then
			os.execute("echo 1 > /sys/devices/platform/leds/leds/kooiot\\:green\\:bs/brightness")
		else
			os.execute("echo 0 > /sys/devices/platform/leds/leds/kooiot\\:green\\:bs/brightness")
		end
	end
	]]--

	local csq = tonumber(info.csq) or 0
	if csq >= 17 then
		os.execute("echo 1 > /sys/devices/platform/leds/leds/kooiot\\:green\\:gs/brightness")
		os.execute("echo 1 > /sys/devices/platform/leds/leds/kooiot\\:green\\:bs/brightness")
	else
		os.execute("echo 0 > /sys/devices/platform/leds/leds/kooiot\\:green\\:gs/brightness")
		if csq >= 10  then
			os.execute("echo 1 > /sys/devices/platform/leds/leds/kooiot\\:green\\:bs/brightness")
		else
			os.execute("echo 0 > /sys/devices/platform/leds/leds/kooiot\\:green\\:bs/brightness")
		end
	end
end

local function reset_4g_wan()
	--- extend the reset time

	os.execute('echo "4G wan reseting...." >> /dev/console')
	os.execute('echo "'..os.date()..' 4G Wan reset module" >> /mnt/data/wwanleds.log')
	os.execute("sync")

	os.execute("ifdown 4g_wan")
	os.execute("echo 1 > /sys/device/gpio/pcie_reset/value")
	nixio.nanosleep(1)
	os.execute("echo 0 > /sys/device/gpio/pcie_reset/value")
	nixio.nanosleep(10)
	os.execute("ifup 4g_wan")
end

local function repower_4g_module()
	os.execute('echo "4G wan re-powering...." >> /dev/console')
	os.execute('echo "'..os.date()..' 4G Wan re-power module" >> /mnt/data/wwanleds.log')
	os.execute("sync")

	os.execute("ifdown 4g_wan")
	os.execute("echo 0 > /sys/device/gpio/pcie_power/value")
	nixio.nanosleep(1)
	os.execute("echo 1 > /sys/device/gpio/pcie_power/value")
	nixio.nanosleep(10)
	os.execute("ifup 4g_wan")
end

local wwan0_reset_last = 0
local wwan0_ip_last_got = os.time()
local there_is_no_wwan0 = true

local function watch_4g_wan()
	local no_wwan0 = true
	local wwan0_has_ip = false
	local iface = util.ubus('network.interface', 'status', {interface='4g_wan_4'})
	if iface and iface.l3_device == 'wwan0' then
		no_wwan0 = false
		local ipv4_addr = iface['ipv4-address']
		if #ipv4_addr > 0 then
			wwan0_has_ip = true
		end
	end

	local iface6 = util.ubus('network.interface', 'status', {interface='4g_wan_6'})
	if iface6 and iface.l3_device == 'wwan0' then
		no_wwan0 = false
		local ipv6_addr = iface['ipv6-address']
		if #ipv6_addr > 0 then
			wwan0_has_ip = true
		end
	end

	--- If there is not wwan0 then do nothing
	if no_wwan0 then
		there_is_no_wwan0 = true
		return
	end

	--- If previously there is no wwan0 then just update the last ip got
	if there_is_no_wwan0 then
		there_is_no_wwan0 = false
		wwan0_ip_last_got = os.time()
	end
	
	if wwan0_has_ip then
		os.execute('echo "4G wan IP is ok!!!!" >> /dev/console')
		wwan0_ip_last_got = os.time()
		wwan0_reset_last = 0
	else
		os.execute('echo "4G wan IP missing" >> /dev/console')
	end

	--- ten minutes ip lost
	if (os.time() - wwan0_ip_last_got) >  (wwan0_reset_last + 600) then
		wwan0_reset_last = wwan0_reset_last + 300
		reset_4g_wan()
	end

	--- already reset 4g module for three times and network still missing
	if wwan0_reset_last > 900 then
		wwan0_ip_last_got = os.time()
		wwan0_reset_last = 0
		repower_4g_module()
		--[[
		os.execute('echo "'..os.date()..' 4G Wan reset reboot" >> /mnt/data/wwanleds.log')
		os.execute("sync")
		os.execute("reboot")
		]]--
	end
end

while true do
	local info, info_str = exec_json('3ginfo json')
	info_export(info_str)
	led_control(info)	
	if info.ccid and string.len(info.ccid) > 0 then
		watch_4g_wan()
	end
	nixio.nanosleep(15)
end
